=INTRODUCTION=

NIIT is a special linux kernel device that allows easy transmission of IPv4 unicast traffic through an IPv6 network. Niit works by first translating an IPv4 address to an IPv6 address in the SIIT syntax ( http://en.wikipedia.org/wiki/IPv6_transition_mechanisms#Stateless_IP.2FICMP_Translation_.28SIIT.29 ). 

Examples

	10.100.0.0/8    --> 0::ffff:10.100.0.0  104 --> 0::ffff:0a64:0000 104
	192.168.2.0/24  --> 0::ffff:192.168.2.0 120 --> 0::ffff:c0a8:0200 120   
	172.16.0.55/32  --> 0::ffff:172.16.0.55 128 --> 0::ffff:ac10:0037 128 
	0.0.0.0/0	--> 0::ffff:0.0.0.0	96  --> 0::ffff:0000:0000 96

 

Tip - to get the corresponding IPv6 netmask - add the IPv4 netmask to 96.
 
Niit then automatically tunnels IPv4 traffic and corresponding IPv6-mapped-IPv4 traffic to specially created interfaces ( niit4to6 and niit6to4 ).
These interfaces MUST be created manually and MUST be named accordingly.
The niit4to6 interface converts IPv4 addresses to IPv6 SIIT format then forwards the traffic to the IPv6 mesh.
For IPv4 traffic destined for the router's network, the niit6to4 interface converts the IPv6-mapped-IPv4 addresses back to IPv4 then forwards them to the IPv4 network. 


==COMPILING NIIT==
 
Add the niit sources to your feeds list. git://gitorious.org/eigennet/packages.git . The official repository might give you problems when installing, but you can try - The address is git://dev.dd19.de/niit.git

If you're using a Kernel version greater than 2.6.37, patch the niit.c file as shown below

{{{
--- zzzzdd19/src/niit.c 2011-07-08 07:33:18.194299089 +0300
+++ sss/niit/src/niit.c 2011-07-14 16:18:12.894563695 +0300
@@ -85,9 +85,14 @@
                        stats->tx_carrier_errors++;
                        goto tx_error_icmp;
                }
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,37)
+tdev = rt6->u.dst.dev;
+dst_release(&rt6->u.dst);
+#else
+tdev = rt6->dst.dev;
+dst_release(&rt6->dst);
+#endif
 
-               tdev = rt6->u.dst.dev;
-               dst_release(&rt6->u.dst);
                if (tdev == dev) {
                        PDEBUG("niit: recursion detected todev = dev \n");
                        stats->collisions++;

}}}
Select and install kmod-niit from your menuconfig screen.

Compile and install the image.

==CONFIGURATIONS==

===NETWORK===
Add the niit4to6 and niit6to4 interfaces - add these lines to your /etc/config/network file


config 'interface' 'niit4to6'
        option 'proto' 'none'
        option 'ifname' 'niit4to6'

config 'interface' 'niit6to4'
        option 'proto' 'none'
        option 'ifname' 'niit6to4'

===OLSR===

By default, OLSR is configured to use Niit, but for completeness, add the UseNiit option to your olsrd configuration file

uci set olsrd.@olsrd[0].UseNiit=yes

Add your router's IPv6-mapped-IPv4 address/addresses as hna6 addresses to your olsrd configuration file ( /etc/config/olsrd didn't seem to work for me, so I added the lines to /var/etc/olsrd.conf ) 

e.g to add 192.168.1.1 and 192.168.2.1

Hna6 { 0::ffff:c0a8:0101 128 }
Hna6 { 0::ffff:c0a8:0201 128 }

Restart olsrd
/etc/init.d/olsrd restart

===FIREWALL===

Set your firewall to allow forwarding of traffic between the niit4to6 , niit6to4 and other interfaces on your router ( as necessary )

Restart firewall
/etc/init.d/firewall restart


Repeat for all other routers in the mesh. In addition to the router's addresses, add 

Hna6 { 0::ffff:0000:0000 96 }

to your headnode ( default IPv4 gateway )

The IPv4 routing table in every router should look like

#ip r
default dev niit4to6  scope link  metric 2 
192.168.1.0/24 dev eth0  proto kernel  scope link  src 192.168.1.1 
192.168.1.3 dev niit4to6  scope link  metric 2 
192.168.1.4 dev niit4to6  scope link  metric 2 
192.168.1.5 dev niit4to6  scope link  metric 2 
192.168.1.6 dev niit4to6  scope link  metric


The IPv6 routing table in every router 

#ip -6 r

::ffff:192.168.1.1 dev niit6to4  metric 2 
::ffff:192.168.1.3 via 2001:470:1f08:1b61::104:3 dev wlan0  metric 2 
::ffff:192.168.1.4 via 2001:470:1f08:1b61::100:7 dev eth0  metric 2 
::ffff:192.168.1.5 via 2001:470:1f08:1b61::100:7 dev eth0  metric 2 
::ffff:192.168.1.6 via 2001:470:1f08:1b61::100:7 dev eth0  metric 2 
::ffff:192.168.1.7 via 2001:470:1f08:1b61::100:7 dev eth0  metric 2 
::ffff:192.168.2.1 dev niit6to4  metric 2 
::ffff:192.168.2.3 via 2001:470:1f08:1b61::104:3 dev wlan0  metric 2 
::ffff:192.168.2.4 via 2001:470:1f08:1b61::100:7 dev eth0  metric 2

Ping to confirm the results