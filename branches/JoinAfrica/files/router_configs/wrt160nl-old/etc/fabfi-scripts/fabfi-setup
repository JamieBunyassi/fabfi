#!/bin/sh

#vars for downloading base configurations 
ff_s='http://fabfi.fablab.af' #fabfi server
ff_dld='/download/software/base_config/2_1_1/' # dld needs leading and trailing /
ff_u='fabfi' #user
ff_cfg='fabfi-files.tgz'
ec="etc/config/"
i_d="etc/init.d/"
r_d="etc/rc.d/"
chilliconf="etc/chilli/defaults"

#temporary directory for downloaded files
ff_tmp='/tmp/'
ff_tdld='/tmp/setup/' #needs trailing /
ff_td='/tmp/setup/packages/' #needs trailing / expected to be a direct sub of tdld. Tar file defines fabfi_config part
ff_tdo='/tmp/setup/packages_optional/' #needs trailing / expected to be a direct sub of tdld. Tar file defines fabfi_config part
ff_MACEnd=':fa:bf:1f:ab:f1'

#misc constants
ff_cIP=0
ff_dIP=0
ff_wm_abIP="10.102." #needs trailing .
ff_m_abIP="10.101." #needs trailing .
ff_m_cIP="0." #needs trailing .
ff_l_abIP="10.103." #needs trailing .
ff_t_abIP="10.104." #needs trailing . NEW for CHILLI
ff_gw_dIP="1"
default_wep="8bb8d3c8d3d8bb3dffd38db33f"

echo ""
echo "Welcome to the FabFi 4.0 device configuration script."  
sleep 2
echo ""


until ((echo $fabfi_num | grep "^1[0-9][0-9]$")||(echo $fabfi_num | 
  grep "^2[0-4][0-9]$")||(echo $fabfi_num | grep "^25[0-4]$")||(echo $fabfi_num | grep "^[1-9][0-9]\{0,1\}$")); do
	echo "Enter the number of your FabFi (must be in range 1-254):"
	read fabfi_num
done 

location="////";
until (echo $location | grep "^[0-9a-zA-z\-\_]*$"); do
	echo "What is your location?  NO SPACES or special characters:"
	read location
done 

until (echo $makeuplink | grep "^[yn]$"); do
	echo "is this an uplink y/n? "
	echo "(y sets wifi to LAN, switch to MESH, internet port to WAN)"
	echo "(n sets wifi to wifimesh and asks where to put MESH)"
	read makeuplink
done 

channel=200
until (test $channel -lt 12); do
#until (echo $channel | grep "[1-9][0-9]\{0,1\}$"); do
	echo "Now you must select the wireless channel, it must be the same for all connecting nodes."  
	echo "It should be a non-overlapping channel for non-connecting nodes"
	echo "Enter the wireless channel (between 1-11 not all channels in this range are valid):"
	read channel
done

if test $channel -lt 16; then
	bssid=0`printf '%x\n' $channel`$ff_MACEnd
else
	bssid=`printf '%x\n' $channel`$ff_MACEnd

fi

if [ $makeuplink == "n" ]; then
	until (echo $meshonswitch | grep "^[yn]$"); do
		echo "put MESH on switch y/n? (n puts MESH on internet port"
		read meshonswitch
	done

	until (echo $distance | grep "^[1-9][0-9]*$"); do
		echo "fabfi distance must be a positive integer greater than 0"
		echo "Enter the transmit distance in meters"
		read distance
	done 

	wep_key="ZzZzzZZ//";
	until (echo $wep_key | grep "^[0-9A-fA-F]*$"); do
		echo "Now you need to select a wep key." 
		echo "Select a wep key to use (type 'd' for Default. Default key is correct for FabFi Jalalabad):"
		read wep_key
		if [ $wep_key == "d" ]; then
			wep_key=$default_wep;
		fi;
	done 
fi

until (echo $makechilli | grep "^[yn]$"); do
	echo "enable chilli on LAN y/n? (y configures chilli, n leaves AP open)"
	read makechilli
done 

if [ $makechilli == "y" ]; then
	echo "enter RADIUS secret"	
	read radsecret

	echo "enter UAMSECRET"
	read uamsecret

	echo "enter RADIUS ADM_USR"
	read admusr

	echo "enter RADIUS ADM_PASS"
	read admpass
fi

let m_dIP="$fabfi_num+$ff_dIP"
#echo MESH and WIFIMESH Class D IP is: $meshing_dIP

let lan_cIP="$fabfi_num+$ff_cIP" 
#echo LAN Class C IP is: $lan_cIP


echo "Symlinking wget for backwards compatibility. If you quit now, you'll have to restore it manually from /usr/bin/wget-real"
# Copy wget for opkg-spoofing purposes
cp -df /usr/bin/wget /usr/bin/wget-real
rm /usr/bin/wget
echo '#!/bin/ash' > /usr/bin/wget-opkg
echo 'cp $4 $3' >> /usr/bin/wget-opkg
chmod ugo+x /usr/bin/wget-opkg
ln -s /usr/bin/wget-opkg /usr/bin/wget

# Restoring wget..
rm /usr/bin/wget
cp -df /usr/bin/wget-real /usr/bin/wget
rm /usr/bin/wget-real
rm /usr/bin/wget-opkg
cp -f /etc/opkg.conf.online /etc/opkg.conf
echo "wget has been relinked successfully."
                  
ns_index=`uci show olsrd | grep -e 'olsrd\.@LoadPlugin\[.*\]\.library=olsrd_nameservice\.so' | 
awk 'FS="[";{print $2}' | awk 'FS="]";{print $1};' | tail -1`

#set config variables
if [ $makeuplink == "y" ]; then

	chilliface="wlan0"
	uci set network.lan.ifname="wlan0"
	uci set network.wan.ifname="eth1"
	uci set network.mesh.ifname="eth0"
	uci set network.wifimesh.ifname=""
	uci set wireless.@wifi-iface[0].network="lan"
	uci set wireless.@wifi-iface[0].mode=ap                                              
	uci set wireless.@wifi-iface[0].hidden=0
	uci set wireless.@wifi-iface[0].encryption=none                                          
	uci delete wireless.@wifi-iface[0].key                          
	uci delete wireless.@wifi-iface[0].bssid                            
	uci set wireless.@wifi-iface[0].ssid=fabfiuplink
	uci set wireless.radio0.distance=100
	olsrd.@Interface[0].ignore=1

else
	if [ $meshonswitch == "y" ]; then
		uci set network.lan.ifname="eth1"
		uci set network.mesh.ifname="eth0"
		chilliface="eth1"
	else
		chilliface="eth0"
		uci set network.lan.ifname="eth0"
		uci set network.mesh.ifname="eth1"
	fi
	uci set network.wan.ifname=""
	uci set wireless.@wifi-iface[0].mode=adhoc                                              
	uci set wireless.@wifi-iface[0].hidden=1
	uci set wireless.@wifi-iface[0].network="wifimesh"

	uci set wireless.@wifi-iface[0].bssid=$bssid
	uci set wireless.@wifi-iface[0].ssid=fabfi${channel}
	uci set wireless.radio0.distance=$distance
	uci set wireless.@wifi-iface[0].key=$wep_key

fi

uci set wireless.radio0.channel=$channel
uci set wireless.radio0.macaddr=`cat /sys/class/ieee80211/phy0/macaddress`
uci set wireless.radio0.disabled=0
uci set system.@system[0].hostname=fabfi${fabfi_num}
uci set network.wifimesh.ipaddr=$ff_wm_abIP${ff_m_cIP}${m_dIP}
uci set network.lan.ipaddr=${ff_l_abIP}${lan_cIP}.${ff_gw_dIP}
uci set network.mesh.ipaddr=$ff_m_abIP${ff_m_cIP}${m_dIP}
uci set olsrd.@Hna4[0].netaddr=${ff_l_abIP}${lan_cIP}.0
uci set olsrd.@LoadPlugin[${ns_index}].name=fabfi${fabfi_num}
uci set mini_snmpd.@mini_snmpd[0].location=$location

if [ $makechilli == "y" ]; then

	uci add olsrd Hna4
	uci set olsrd.@Hna4[-1].netaddr=${ff_t_abIP}${lan_cIP}.0
	uci set olsrd.@Hna4[-1].netmask=255.255.255.0

	echo HS_LANIF=$chilliface >> $chilliconf          # Subscriber Interface for client devices
	echo HS_NETWORK=${ff_t_abIP}${lan_cIP}.0 >> $chilliconf    # HotSpot Network (must include HS_UAMLISTEN)	
	echo HS_UAMLISTEN=${ff_t_abIP}${lan_cIP}.${ff_gw_dIP}  >> $chilliconf          # HotSpot IP Address (on subscriber network)
	echo HS_DNS=${ff_t_abIP}${lan_cIP}.${ff_gw_dIP} >> $chilliconf 
	echo HS_NASID=fabfi${fabfi_num} >> $chilliconf 
	echo HS_LOC_NAME=fabfi${fabfi_num} >> $chilliconf     # WISPr Location Name and used in portal
	echo HS_RADSECRET=$radsecret >> $chilliconf    # Set to be your RADIUS shared secret
	echo HS_UAMSECRET=$uamsecret >> $chilliconf    # Set to be your UAM secret
	echo HS_ADMUSR=$admusr >> $chilliconf 
	echo HS_ADMPWD=$admpass >> $chilliconf 
	cd /etc/rc.d
	ln -s ../init.d/chilli S75chilli
	cd /

	#new for CHILLI
	uci delete dhcp.lan.start
	uci delete dhcp.lan.limit
	uci delete dhcp.lan.leasetime
	uci set dhcp.lan.ignore=1
	uci set firewall.@zone[0].output=REJECT
	echo CHILLI GW IP = `uci get network.tunnel.ipaddr`
	
	#next two lines set domain for fabfi.lan set as tunnel's IP
	uci set dhcp.@domain[-1]=domain
	uci set dhcp.@domain[-1].ip=${ff_t_abIP}${lan_cIP}.${ff_gw_dIP}
else
	#next two lines set domain for fabfi.lan set as lan's IP
	uci set dhcp.@domain[-1]=domain
	uci set dhcp.@domain[-1].ip=${ff_l_abIP}${lan_cIP}.${ff_gw_dIP}
fi

uci add dhcp domain
uci set dhcp.@domain[-1]=domain
uci set dhcp.@domain[-1].name=time.mesh
uci set dhcp.@domain[-1].ip=$ff_m_abIP${ff_m_cIP}254
uci add dhcp domain
uci set dhcp.@domain[-1]=domain
uci set dhcp.@domain[-1].name=master.mesh
uci set dhcp.@domain[-1].ip=$ff_m_abIP${ff_m_cIP}254
echo Hostname = `uci get system.@system[0].hostname`
echo ""
echo LAN IP = `uci get network.lan.ipaddr`
echo MESH IP = `uci get network.mesh.ipaddr`
echo WIFIMESH IP = `uci get network.wifimesh.ipaddr`

echo ""

echo Wireless channel = `uci get wireless.radio0.channel`
echo Wireless distance = `uci get wireless.radio0.distance`
#echo Wireless WEP key = `uci get wireless.@wifi-iface[0].key`
sleep 2

uci commit
/etc/init.d/olsrd enable
/etc/init.d/fstab enable

echo "Adding password file.  If you exit script before setting a password, you will need to reflash device"
cp -f /etc/passwd.preconfig /etc/passwd

echo ""
echo "Choose a root password"
passwd root

#rm /etc/nodogsplash/htdocs/splash.html
#ln -s /tmp/splash.html /etc/nodogsplash/htdocs/splash.html

echo ""
echo Configuration is complete!
echo Your router is rebooting... 
echo 1. WAIT 1 MINUTE
echo 2. UNPLUG YOUR COMPUTER FROM THE ROUTER
echo 3. WAIT 1 MINUTE
echo 4. PLUG YOUR COMPUTER BACK INTO THE ROUTER
echo ""
sleep 4
reboot &

